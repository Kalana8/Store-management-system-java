/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package supermarket;
//Remember to add that

import java.io.*;
import javax.swing.*;
import javax.swing.table.*;
//
import java.util.*;
import java.lang.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Group1
 */
public class Admin extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Admin() {
        initComponents();

        String filePath = "table.txt";
        File file = new File(filePath);
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            Object[] tableLines = br.lines().toArray();
            for (Object tableLine : tableLines) {
                String line = tableLine.toString().trim();
                String[] dataRow = line.split("/");
                model.addRow(dataRow);
            }

        } catch (FileNotFoundException f) {
            JOptionPane.showMessageDialog(null, "Can not import Data from Txt File(889)");
        }
        //For Seller
        String fPath = "Seller.txt";
        File file2 = new File(fPath);
        try {
            BufferedReader br = new BufferedReader(new FileReader(file2));

            DefaultTableModel model = (DefaultTableModel) SellerTable.getModel();

            Object[] tableLines = br.lines().toArray();
            for (Object tableLine : tableLines) {
                String line = tableLine.toString().trim();
                String[] dataRow = line.split("/");
                model.addRow(dataRow);
            }

        } catch (FileNotFoundException f) {
            JOptionPane.showMessageDialog(null, "Can not import Data from Txt File(889)");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        SID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        SName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        SPassword = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        SGender = new javax.swing.JComboBox<>();
        SellerAdd = new javax.swing.JButton();
        SellerUpdate = new javax.swing.JButton();
        SellerDelete = new javax.swing.JButton();
        SellerClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SellerTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        Log = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Product = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Name = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DELETE = new javax.swing.JButton();
        CLEAR = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        EDIT = new javax.swing.JButton();
        ADD = new javax.swing.JButton();
        Qty = new javax.swing.JTextField();
        Price = new javax.swing.JTextField();
        Cat = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        Log1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(216, 191, 216));

        jTabbedPane1.setBackground(new java.awt.Color(216, 191, 216));
        jTabbedPane1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        jPanel3.setBackground(new java.awt.Color(93, 121, 108));
        jPanel3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel9.setText("   MANAGE CASHIERS");
        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel10.setText("CASHIR ID");

        SID.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SID.setForeground(new java.awt.Color(0, 0, 255));
        SID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SIDActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel11.setText("NAME");

        SName.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SName.setForeground(new java.awt.Color(0, 0, 255));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel12.setText("PASSWORD");

        SPassword.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SPassword.setForeground(new java.awt.Color(0, 0, 255));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setText("GENDER");

        SGender.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SGender.setForeground(new java.awt.Color(0, 102, 153));
        SGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"", "Male", "Female" }));
        SGender.setToolTipText("Male\nFemale");

        SellerAdd.setBackground(new java.awt.Color(0, 102, 204));
        SellerAdd.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SellerAdd.setForeground(new java.awt.Color(255, 255, 255));
        SellerAdd.setText("Add");
        SellerAdd.setBorder(null);
        SellerAdd.setBorderPainted(false);
        SellerAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerAddActionPerformed(evt);
            }
        });

        SellerUpdate.setBackground(new java.awt.Color(0, 102, 204));
        SellerUpdate.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SellerUpdate.setForeground(new java.awt.Color(255, 255, 255));
        SellerUpdate.setText("Update");
        SellerUpdate.setBorder(null);
        SellerUpdate.setBorderPainted(false);
        SellerUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerUpdateActionPerformed(evt);
            }
        });

        SellerDelete.setBackground(new java.awt.Color(0, 102, 204));
        SellerDelete.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SellerDelete.setForeground(new java.awt.Color(255, 255, 255));
        SellerDelete.setText("Delete");
        SellerDelete.setBorder(null);
        SellerDelete.setBorderPainted(false);
        SellerDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerDeleteActionPerformed(evt);
            }
        });

        SellerClear.setBackground(new java.awt.Color(0, 102, 204));
        SellerClear.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SellerClear.setForeground(new java.awt.Color(255, 255, 255));
        SellerClear.setText("Clear");
        SellerClear.setBorder(null);
        SellerClear.setBorderPainted(false);
        SellerClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerClearActionPerformed(evt);
            }
        });

        SellerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seller ID", "PASSWORD", "NAME", "GENDER"
            }
        ));
        SellerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SellerTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(SellerTable);

        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("CASHIERS LIST");

        Log.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N
        Log.setText("Logout");
        Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon("/Users/kalanakavinda/Documents/OOP Assignment/Crush Cosmetics /Icon/GreenMinimalCosmeticInstagrampost-ezgif.com-resize.png")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel13))
                                        .addGap(29, 29, 29)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(SGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(290, 290, 290))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel14)
                                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addComponent(SName, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                                            .addComponent(SID))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel12)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(SPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(20, 20, 20))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(SellerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(SellerUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(SellerDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(SellerClear, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(116, 116, 116))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(226, 226, 226)
                                .addComponent(Log))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {SGender, SID, SName, SPassword});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Log)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(SPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(SName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SellerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SellerUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SellerDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SellerClear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62)
                        .addComponent(jLabel14)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {SGender, SID, SName, SPassword});

        jTabbedPane1.addTab("Manage Cashiers", jPanel3);

        jPanel2.setBackground(new java.awt.Color(124, 137, 139));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel3.setText("    MANAGE PRODUCTS");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setText("PRODUCT ID");

        Product.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Product.setForeground(new java.awt.Color(0, 0, 255));
        Product.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setText("NAME");

        Name.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Name.setForeground(new java.awt.Color(0, 0, 255));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setText("QUANTITY");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setText("PRICE");

        DELETE.setBackground(new java.awt.Color(0, 102, 204));
        DELETE.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        DELETE.setForeground(new java.awt.Color(255, 255, 255));
        DELETE.setText("Delete");
        DELETE.setBorder(null);
        DELETE.setBorderPainted(false);
        DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEActionPerformed(evt);
            }
        });

        CLEAR.setBackground(new java.awt.Color(0, 102, 204));
        CLEAR.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        CLEAR.setForeground(new java.awt.Color(255, 255, 255));
        CLEAR.setText("Clear");
        CLEAR.setBorder(null);
        CLEAR.setBorderPainted(false);
        CLEAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Price", "Quantity", "Category"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel8.setText("PRODUCTS LIST");

        EDIT.setBackground(new java.awt.Color(0, 102, 204));
        EDIT.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        EDIT.setForeground(new java.awt.Color(255, 255, 255));
        EDIT.setText("Update");
        EDIT.setBorder(null);
        EDIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDITActionPerformed(evt);
            }
        });

        ADD.setBackground(new java.awt.Color(0, 102, 204));
        ADD.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        ADD.setForeground(new java.awt.Color(255, 255, 255));
        ADD.setText("Add");
        ADD.setBorder(null);
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });

        Qty.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Qty.setForeground(new java.awt.Color(0, 0, 255));
        Qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QtyActionPerformed(evt);
            }
        });
        Qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                QtyKeyTyped(evt);
            }
        });

        Price.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Price.setForeground(new java.awt.Color(0, 0, 255));
        Price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceActionPerformed(evt);
            }
        });
        Price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PriceKeyTyped(evt);
            }
        });

        Cat.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Cat.setForeground(new java.awt.Color(0, 0, 255));
        Cat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CatKeyTyped(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel19.setText("CATEGORY");

        Log1.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N
        Log1.setText("Logout");
        Log1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Log1ActionPerformed(evt);
            }
        });
        Log1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Log1KeyPressed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon("/Users/kalanakavinda/Documents/OOP Assignment/Crush Cosmetics /Icon/GraySimpleCosmeticProductsYourStory-ezgif.com-resize.png")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Log1)
                .addGap(15, 15, 15))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(EDIT, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Product, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel19))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Cat, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(Price)
                            .addComponent(Qty))
                        .addGap(239, 239, 239))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(Log1)
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Cat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Product, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EDIT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(55, 55, 55)
                        .addComponent(jLabel8))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 101, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Products", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void PriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PriceKeyTyped

    }//GEN-LAST:event_PriceKeyTyped

    private void QtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QtyKeyTyped

    }//GEN-LAST:event_QtyKeyTyped

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        // TODO add your handling code here:

        ProductManager s1 = new ProductManager();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        while (Product.getText().equals("") || Name.getText().equals("") || Price.getText().equals("") || Qty.getText().toString().equals("") || Cat.getText().toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill in the required fields");
            return;
        }
        try {
            int Quantity = Integer.parseInt(Qty.getText());
            int Pr = Integer.parseInt(Price.getText());
            if (Quantity <= 0 || Pr <= 0) {
                JOptionPane.showMessageDialog(this, "Enter only positive integer value");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter Only integer value");
            return;
        }

        String Id;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            Id = model.getValueAt(i, 0).toString().trim();
            if (Product.getText().equals(Id)) {
                JOptionPane.showMessageDialog(null, "Product ID should be Unique");
                return;
            }
        }

        s1.setId(Product.getText().trim());
        s1.setName(Name.getText().trim());
        s1.setPrice(Price.getText().trim());
        s1.setQty(Qty.getText().trim());
        s1.setCat(Cat.getText().trim());

        //Addding data to Txt File
        ProductAddMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());
        //Adding Data to Jtable
        model.addRow(new Object[]{s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat()});
        JOptionPane.showMessageDialog(this, "Data Successfully Added.");

        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");

    }//GEN-LAST:event_ADDActionPerformed

    private void EDITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDITActionPerformed
        // TODO add your handling code here:

        ProductManager s1 = new ProductManager();

        s1.setId(Product.getText().trim());
        s1.setName(Name.getText().trim());
        s1.setPrice(Price.getText().trim());
        s1.setQty(Qty.getText().trim());
        s1.setCat(Cat.getText().trim());
        //Addding the edited data and deleting the privious data from Txt File
        try {
            int Quantity = Integer.parseInt(Qty.getText());
            int Pr = Integer.parseInt(Price.getText());
            if (Quantity <= 0 || Pr <= 0) {
                JOptionPane.showMessageDialog(this, "Enter only positive integer value");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter Only integer value");
            return;
        }

        ProductEDeleteMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());
        ProductAddMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());
 
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        if (jTable1.getSelectedRowCount() == 1) {
            //if single row is selected than update

            while (Product.getText().equals("") || Name.getText().equals("") || Price.getText().equals("") || Qty.getText().toString().equals("") || Cat.getText().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill in the required fields");
                return;
            }

            String prod = Product.getText();
            String nam = Name.getText();
            String price = Price.getText();
            String qty = Qty.getText();
            String cat = Cat.getText();
            //set update value
            model.setValueAt(prod, jTable1.getSelectedRow(), 0);
            model.setValueAt(nam, jTable1.getSelectedRow(), 1);
            model.setValueAt(price, jTable1.getSelectedRow(), 2);
            model.setValueAt(qty, jTable1.getSelectedRow(), 3);
            model.setValueAt(cat, jTable1.getSelectedRow(), 4);
            //Update message display
            JOptionPane.showMessageDialog(this, "Update Successfully..");
        } else {
            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is Empty..");
            } else {
                //if row is not selected or multiple rows are selected
                JOptionPane.showMessageDialog(this, "Please Select Single Row to Update..");
            }

        }
        //editing from the file

        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");
        Product.setEditable(true);
    }//GEN-LAST:event_EDITActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        //Set Data to their Text Field
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //set data to text field when row is selected
        String product = model.getValueAt(jTable1.getSelectedRow(), 0).toString();
        String name = model.getValueAt(jTable1.getSelectedRow(), 1).toString();
        String price = model.getValueAt(jTable1.getSelectedRow(), 2).toString();
        String qty = model.getValueAt(jTable1.getSelectedRow(), 3).toString();
        String cat = model.getValueAt(jTable1.getSelectedRow(), 4).toString();

        //set to textfield
        Product.setText(product);
        Name.setText(name);
        Price.setText(price);
        Qty.setText(qty);
        Cat.setText(cat);

        Product.setEditable(false);
    }//GEN-LAST:event_jTable1MouseClicked

    private void CLEARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARActionPerformed
        // TODO add your handling code here:
        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");
        Product.setEditable(true);

    }//GEN-LAST:event_CLEARActionPerformed

    private void DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEActionPerformed
        // TODO add your handling code here:
        //Gettting jtable Model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        ProductManager s1 = new ProductManager();
        s1.setId(Product.getText().trim());
        s1.setName(Name.getText().trim());
        s1.setPrice(Price.getText().trim());
        s1.setQty(Qty.getText().trim());
        s1.setCat(Cat.getText().trim());
        //Deleting the text from the file

        ProductDeleteMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());
        //deleting row from the display GUI table
        if (jTable1.getSelectedRowCount() == 1) {
            //if row is selected than delete
            model.removeRow(jTable1.getSelectedRow());
        } else if (jTable1.getRowCount() == 0) {
            //if table is empty (no Data) than display message
            JOptionPane.showMessageDialog(this, "Table is Empty..");
        } else {
            //if table is not empty but row is not selected or multiply rows are selected
            JOptionPane.showMessageDialog(this, "Table is Empty or Muliple Rows are selected");

        }
        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");
        Product.setEditable(true);
    }//GEN-LAST:event_DELETEActionPerformed

    private void SellerAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerAddActionPerformed
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel AddModel = (DefaultTableModel) SellerTable.getModel();

        while (SID.getText().equals("") || SPassword.getText().equals("") || SName.getText().equals("") || SGender.getSelectedItem().toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill in the required fields");
            return;
        }
        String Id;
        for (int i = 0; i < SellerTable.getRowCount(); i++) {
            Id = AddModel.getValueAt(i, 0).toString().trim();
            if (SID.getText().equals(Id)) {
                JOptionPane.showMessageDialog(null, "Seller ID should be Unique");
                return;
            }
        }

        seller.setId(SID.getText());
        seller.setSPassword(SPassword.getText());
        seller.setName(SName.getText());
        seller.setSGender(SGender.getSelectedItem().toString());
        // In txt File

        SellingAddMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender());

        Object[] row = {seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender()};
        AddModel.addRow(row);

        JOptionPane.showMessageDialog(this, "Data Successfully Added");

        SID.setText("");
        SPassword.setText("");
        SName.setText("");
        SGender.setSelectedItem("");
    }//GEN-LAST:event_SellerAddActionPerformed

    private void SellerUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerUpdateActionPerformed
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel EditModel = (DefaultTableModel) SellerTable.getModel();

        seller.setId(SID.getText());
        seller.setSPassword(SPassword.getText());
        seller.setName(SName.getText());
        seller.setSGender(SGender.getSelectedItem().toString());

        if (SellerTable.getSelectedRowCount() == 1) {
            while (SID.getText().equals("") || SName.getText().equals("") || SPassword.getText().equals("") || SGender.getSelectedItem().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill in the required fields");
                return;
            }

            EditModel.setValueAt(seller.getId(), SellerTable.getSelectedRow(), 0);
            EditModel.setValueAt(seller.getSPassword().toString(), SellerTable.getSelectedRow(), 1);
            EditModel.setValueAt(seller.getName(), SellerTable.getSelectedRow(), 2);
            EditModel.setValueAt(seller.getSGender(), SellerTable.getSelectedRow(), 3);

            //updating in txt file
            SellingEDeleteMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender());
            SellingAddMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender());

            JOptionPane.showMessageDialog(this, "Record Updated Successfully");
        } else {
            if (SellerTable.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Table is Empty");
            } else if (SellerTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No Row is Selected");
            } else {
                JOptionPane.showMessageDialog(null, "Please Select a Single Row to Update");
            }
        }

        SID.setText("");
        SPassword.setText("");
        SName.setText("");
        SGender.setSelectedItem("");
        SID.setEditable(true);
    }//GEN-LAST:event_SellerUpdateActionPerformed

    private void SellerDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerDeleteActionPerformed
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel DeleteModel = (DefaultTableModel) SellerTable.getModel();

        seller.setId(SID.getText());
        seller.setSPassword(SPassword.getText());
        seller.setName(SName.getText());
        seller.setSGender(SGender.getSelectedItem().toString());

        if (SellerTable.getSelectedRowCount() == 1) {
            DeleteModel.removeRow(SellerTable.getSelectedRow());
            SellingDeleteMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender());
            JOptionPane.showMessageDialog(this, "Record Successfully Deleted");
        } else if (SellerTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Table is Empty");
        } else if (SellerTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No Row is Selected");
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Single Row to Update");
        }

        SID.setText("");
        SPassword.setText("");
        SName.setText("");
        SGender.setSelectedItem("");
        SID.setEditable(true);
    }//GEN-LAST:event_SellerDeleteActionPerformed

    private void SellerClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerClearActionPerformed
        // TODO add your handling code here:
        SID.setText("");
        SName.setText("");
        SPassword.setText("");
        SGender.setSelectedItem("");
        SID.setEditable(true);
    }//GEN-LAST:event_SellerClearActionPerformed

    private void CatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CatKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_CatKeyTyped

    private void LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogActionPerformed
        // TODO add your handling code here:
        Login log = new Login();
        log.setVisible(true);
        dispose();
    }//GEN-LAST:event_LogActionPerformed

    private void Log1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Log1ActionPerformed
        // TODO add your handling code here:
        Login log = new Login();
        log.setVisible(true);
        dispose();
    }//GEN-LAST:event_Log1ActionPerformed

    private void Log1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Log1KeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_Log1KeyPressed

    private void SellerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SellerTableMouseClicked
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel model = (DefaultTableModel) SellerTable.getModel();

        seller.setId(model.getValueAt(SellerTable.getSelectedRow(), 0).toString());
        seller.setSPassword(model.getValueAt(SellerTable.getSelectedRow(), 1).toString());
        seller.setName(model.getValueAt(SellerTable.getSelectedRow(), 2).toString());
        seller.setSGender(model.getValueAt(SellerTable.getSelectedRow(), 3).toString());

        SID.setText(seller.getId());
        SPassword.setText(seller.getSPassword());
        SName.setText(seller.getName());
        SGender.setSelectedItem(seller.getSGender());

        SID.setEditable(false);
    }//GEN-LAST:event_SellerTableMouseClicked

    private void SIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SIDActionPerformed

    private void QtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QtyActionPerformed

    private void ProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductActionPerformed

    private void PriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PriceActionPerformed

    //adding the specific text fields on the file 
    private void ProductAddMethod(String id, String name, String price, String qty, String cat) {
        try {
            FileWriter Writer = new FileWriter("table.txt", true);
            Writer.write(id + "/" + name + "/" + price + "/" + qty + "/" + cat);
            Writer.write(System.getProperty("line.separator"));
            Writer.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Data to Txt File(757)");
        }

    }

    private void ProductDeleteMethod(String id, String name, String price, String qty, String cat) {
        String SpecificString = id.trim() + "/" + name.trim() + "/" + price.trim() + "/" + qty.trim() + "/" + cat.trim(), currentString;
        try {
            FileReader fRead = new FileReader("table.txt");
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter("temp.txt",true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);
            while ((currentString = fReadBuffer.readLine()) != null) {
                if (currentString.equals(SpecificString)) {
                    continue;
                }
                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();
            }

            fReadBuffer.close();
            fWriteBuffer.close();
            File originalFile = new File("table.txt");
            File tempFile = new File("temp.txt");
            originalFile.delete();
            tempFile.renameTo(originalFile);
           
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    private void ProductEDeleteMethod(String id, String name, String price, String qty, String cat) {
        String SpecificString = id.trim() + "/" + name.trim() + "/" + price.trim() + "/" + qty.trim() + "/" + cat.trim(), currentString;
        try {
            FileReader fRead = new FileReader("table.txt");
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter("temp.txt", true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);

            while ((currentString = fReadBuffer.readLine()) != null) {
                String SpecificId = currentString.substring(0, 5);
                if (SpecificId.equals(id)) {
                    continue;
                }
                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();
            }
            fReadBuffer.close();
            fWriteBuffer.close();
            File originalFile = new File("table.txt");
            originalFile.delete();
            File tempFile = new File("temp.txt");
            tempFile.renameTo(originalFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    private void SellingAddMethod(String ID, String Password, String Name, String Gender) {
        try {
            FileWriter Writer = new FileWriter("Seller.txt", true);
            Writer.write(ID + "/" + Password + "/" + Name + "/" + Gender);
            Writer.write(System.getProperty("line.separator"));
            Writer.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Data to Txt File(757)");
        }

    }

    private void SellingDeleteMethod(String Id, String Password, String Name, String Gender) {
        String SpecificString = Id + "/" + Password + "/" + Name + "/" + Gender, currentString;

        File originalFile = new File("Seller.txt");
        File tempFile = new File("Temp1.txt");
        try {
            FileReader fRead = new FileReader(originalFile);
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter(tempFile,true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);
            while ((currentString = fReadBuffer.readLine()) != null) {
                if ((currentString.equals(SpecificString))) {
                    continue;
                }

                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();

            }
            
            fReadBuffer.close();
            fWriteBuffer.close();
            originalFile.delete();
            tempFile.renameTo(originalFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    private void SellingEDeleteMethod(String Id, String Password, String Name, String Gender) {
        String SpecificString = Id.trim() + "/" + Password.trim() + "/" + Name.trim() + "/" + Gender.trim(), currentString;
        try {
            FileReader fRead = new FileReader("Seller.txt");
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter("Temp1.txt", true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);

            while ((currentString = fReadBuffer.readLine()) != null) {
                String SpecificId = currentString.substring(0, 5);
                if (SpecificId.equals(Id)) {
                    continue;
                }
                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();
            }
            fReadBuffer.close();
            fWriteBuffer.close();
            File originalSellerFile = new File("Seller.txt");
            originalSellerFile.delete();
            File tempSellerFile = new File("Temp1.txt");
            tempSellerFile.renameTo(originalSellerFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JButton CLEAR;
    private javax.swing.JTextField Cat;
    private javax.swing.JButton DELETE;
    private javax.swing.JButton EDIT;
    private javax.swing.JButton Log;
    private javax.swing.JButton Log1;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField Price;
    private javax.swing.JTextField Product;
    private javax.swing.JTextField Qty;
    private javax.swing.JComboBox<String> SGender;
    private javax.swing.JTextField SID;
    private javax.swing.JTextField SName;
    private javax.swing.JTextField SPassword;
    private javax.swing.JButton SellerAdd;
    private javax.swing.JButton SellerClear;
    private javax.swing.JButton SellerDelete;
    private javax.swing.JTable SellerTable;
    private javax.swing.JButton SellerUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
